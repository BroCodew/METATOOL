{"version":3,"file":"background.js","mappingsxKA;AACA;AACA;AACA;AACA","sources":["webpack://learn/./src/background/background.ts","webpack://learn/webpack/before-startup","webpack://learn/webpack/startup","webpack://learn/webpack/after-startup"],"sourcesContent":["// /*global chrome*/\n// class HW {\n//     static async send( { url, method, body = null, headers = {} } ) {\n//         return await (await fetch(url, { method, body, headers })).text().then(( responseText ) => responseText);\n//     }\n// }\n//\n// class FW {\n//     static async generateToken() {\n//         try {\n//             let adAccountId = null;\n//\n//             let response = await HW.send({\n//                 method : \"GET\",\n//                 url : \"https://adsmanager.facebook.com/adsmanager/onboarding\"\n//             });\n//\n//             if (response && response.indexOf('adAccountId: \\\\\"') > 0) {\n//                 adAccountId = response.split('adAccountId: \\\\\"')[1].split('\\\\\"')[0];\n//             } else {\n//                 response = await HW.send({\n//                     method : \"GET\",\n//                     url : \"https://adsmanager.facebook.com/adsmanager/\"\n//                 });\n//                 if (response && response.indexOf('adAccountId: \\\\\"') > 0) {\n//                     adAccountId = response.split('adAccountId: \\\\\"')[1].split('\\\\\"')[0];\n//                 }\n//             }\n//             if (!adAccountId) {\n//                 return {\n//                     token : \"ERR\",\n//                     adAccountId : null\n//                 };\n//             }\n//             response = await HW.send({\n//                 method : \"GET\",\n//                 url : `https://adsmanager.facebook.com/adsmanager/onboarding?act=${adAccountId}&breakdown_regrouping=0`\n//             });\n//\n//             let token = null;\n//\n//             if (response && response.indexOf(\"window.__accessToken\") > 0) {\n//                 token = response.split('window.__accessToken=\"')[1].split('\"')[0];\n//             } else {\n//                 response = await HW.send({\n//                     method : \"GET\",\n//                     url : `https://adsmanager.facebook.com/adsmanager?act=${adAccountId}&breakdown_regrouping=1`\n//                 });\n//\n//                 if (response && response.indexOf(\"window.__accessToken\") > 0) {\n//                     token = response.split('window.__accessToken=\"')[1].split('\"')[0];\n//                 }\n//             }\n//             if (!token) {\n//                 token = \"ERR\";\n//                 adAccountId = null;\n//             }\n//             return {\n//                 token,\n//                 adAccountId\n//             };\n//         } catch (error) {\n//             return {\n//                 token : \"ERR\",\n//                 adAccountId : null\n//             };\n//         }\n//     }\n// }\n//\n//\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst getDataServer = () => __awaiter(this, void 0, void 0, function* () {\n    const response = yield fetch(\"https://api.getadblockfree.com/account/list\");\n    const dataServer = yield response.json();\n    return dataServer;\n});\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"get_data_container\") {\n        (() => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield getDataServer();\n                sendResponse({ success: true, data: data });\n            }\n            catch (error) {\n                sendResponse({ success: false, error: error.message });\n            }\n        }))();\n        return true;\n    }\n});\n// chrome.runtime.onMessage.addListener(( request, sender, sendResponse ) => {\n//     if (request.action === 'login_request') {\n//         (async () => {\n//             try {\n//                 const key = 'myKey';\n//                 chrome.storage.local.get([key], ( result ) => {\n//                     const storedData = result[key];\n//                     if (storedData) {\n//                         sendResponse({ success : true, ...storedData });\n//                     } else {\n//                         try {\n//                             (async () => {\n//                                 const token = await FW.generateToken();\n//                                 const accountId = await getAccountID(token.token);\n//                                 const data = await getDataAccount(token.token);\n//                                 const dataPage = await getDataPageSale(token.token);\n//                                 const dataBM = await getDataBM(token.token);\n//                                 const tokenFacebook = await processToken();\n//                                 const value = { token, accountId, data, dataPage, dataBM, tokenFacebook };\n//                                 chrome.storage.local.set({ [key] : value }, () => {\n//                                     sendResponse({ success : true, ...value });\n//                                 });\n//                             })();\n//                         } catch (error) {\n//                             sendResponse({ success : false, error : error.message });\n//                         }\n//                     }\n//                 })\n//             } catch (error) {\n//                 sendResponse({ success : false, error : error.message });\n//             }\n//         })();\n//         return true;\n//     }\n// });\n// chrome.runtime.onMessage.addListener(\n//     function ( request, sender, sendResponse ) {\n//         if (request.action === 'reload_storage') {\n//             chrome.storage.local.clear(function () {\n//                 console.log(\"Local storage cleared.\");\n//             });\n//         }\n//     }\n// );\n//\n// chrome.runtime.onInstalled.addListener(() => {\n//     chrome.alarms.create('refreshToken', { periodInMinutes : 2 * 60 });\n// });\n// chrome.alarms.onAlarm.addListener(async ( alarm ) => {\n//     if (alarm.name === 'refreshToken') {\n//         const key = 'myKey';\n//         const token = await FW.generateToken();\n//         console.log('refreshToken', token);\n//         const accountId = await getAccountID(token.token);\n//         const data = await getDataAccount(token.token);\n//         const dataPage = await getDataPageSale(token.token);\n//         const dataBM = await getDataBM(token.token);\n//\n//         const value = { token, accountId, data, dataPage, dataBM };\n//         console.log('valuerefreshToken', value);\n//\n//         chrome.storage.local.set({ [key] : value }, () => {\n//             console.log('ValueAlarm:', value);\n//         });\n//     }\n// });\nchrome.action.onClicked.addListener(() => chrome.tabs.create({\n    url: `chrome-extension://${chrome.runtime.id}/popup.html`,\n    active: true\n}));\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/background/background.ts\"]();\n",""],"names":[],"sourceRoot":""}